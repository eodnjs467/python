# 알고리즘 복잡도 표현 방법
# 1. 알고리즘 복잡도 계산이 필요한 이유
#     하나의 문제를 푸는 알고리즘은 다양할 수있음.

#알고리즘 목잡도 계산 항목
# 1. 시간 복잡도 : 알고리즘 실행속도
# 2. 공간 복잡도 : 알고리즘이 사용하는 메모리 사이즈

# 알고리즘 시간 복잡도의 주요 요소 : 반복문이 지배합니다.

# 생각해보기 : 자동차로 서울에서 부산을 가기 위해, 다음과 같은 항목을 나누었을 때 ,
# 가장 총 시간에 영향을 미칠 것 같은 요소는?
# 자동차로 서울에서 부산가기
#     1. 자동차 문열기
#     2. 자동차 문닫기
#     3. 자동차 운전석 등받이 조정하기
#     4. 자동차 시동걸기
#     5. 자동차로 서울에서 부산가기   ------제일 많이 걸림
#     6. 자동차 시동끄기
#     7. 자동차 문열기
#     8. 자동차 문닫기

# 반복문이 시간 복잡도에 가장 영향을 많이 미치는 요소이다.
#     입력 크기가 커지면 커질수록 반복문이 알고리즘 수행 시간을 지배함

# 알고리즘 성능 표기법
# Big O(빅-오)표기법 : O(N)
#     알고리즘 최악의 실행시간을 표기
#     가장 많이/일반적으로 사용함
#     아무리 최악의 상황이라도, 이정도의 성능은 보장한다는 의미
# 오메가 표기법 : 알고리즘 최상의 실행 시간을 표기
# 세타 표기법 : 알고리즘 평균 실행 시간을 표기

# O(입력)
#     입력 n에 따라 결정되는 시간 복잡도 함수
#     O(1) < O(logn) < O(n) < O(nlogn) 등 . .
# n이 1이든 100이든, 1000이든 간에 실행을
#     무조건 2회(상수회) 실행한다. O(1)
    '''python
    if n > 10 :
        print(n)
    '''
    # 무조건 n번, n+10번, 3n+10 번 실행한다. O(n)
    variable = 1
    for index in range(n):
        print(index)

# 연습 1: 1부터 n 까지의 합을 구하는 알고리즘 작성해보기
def sum_all(n):
    total = 0
    for num in range(1, n+1):           ## 입력n에따라 결정되기 때문에
        total +=num                     ## 시간복잡도: n, 빅오표기법 : O(n)
    return total                        ## 굳이 따지자면 total = 0 이라는 것이 있기 때문에, n+1 or O(n+1)이라고 할 수 있다고 함.
sum_all(100)



#1부터 n 까지의 합을 구하는 알고리즘2
def sum_all(n):
    return int(n*(n+1)/2)               ## n이 뭐든간에 1번 수행함
sum_all(100)                            ## 시간복잡도 : 1, 빅오표기법 : O(1)

                                        ## 따라서 2번째 알고리즘이 더 효율적이고 좋다

